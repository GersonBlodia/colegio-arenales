generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Rol {
  Administrador
  Cocinero
  Mesero
  Limpieza
  Asistente
  RRHH
}

//Modulo de Direccion 
model Pais {
  idPais        Int            @id @default(autoincrement())
  nombrePais    String         @db.VarChar(100)
  estado        Boolean        @default(true)
  departamentos Departamento[]
}

model Departamento {
  idDepartamento     Int         @id @default(autoincrement())
  idPais             Int
  nombreDepartamento String      @db.VarChar(100)
  estado             Boolean     @default(true)
  pais               Pais        @relation(fields: [idPais], references: [idPais])
  provincias         Provincia[]
}

model Provincia {
  idProvincia     Int          @id @default(autoincrement())
  idDepartamento  Int
  nombreProvincia String       @db.VarChar(100)
  estado          Boolean      @default(true)
  departamento    Departamento @relation(fields: [idDepartamento], references: [idDepartamento])
  distritos       Distrito[]
}

model Distrito {
  idDistrito         Int                  @id @default(autoincrement())
  idProvincia        Int
  nombreDistrito     String               @db.VarChar(100)
  estado             Boolean              @default(true)
  provincia          Provincia            @relation(fields: [idProvincia], references: [idProvincia])
  direccionUbicacion DireccionUbicacion[]
}

model DireccionUbicacion {
  idDireccionUbicacion Int       @id @default(autoincrement())
  idDistrito           Int
  detalleUbicacion     String    @db.Text
  estado               Boolean   @default(true)
  distrito             Distrito  @relation(fields: [idDistrito], references: [idDistrito])
  persona              Persona[]
}
model Tipo_Documento {
  idTipoDocumento        Int       @id @default(autoincrement())
  nombreTipoDocumento    String    @unique @db.VarChar(50)
  descripcion            String?   @db.VarChar(255)
  estado                 Boolean   @default(true)
  persona                Persona[]
  nacionalidadAproximada String?
}

model Tipo_Documento_Adjunto {
  idTipoDocumentoAdjunto Int                @id @default(autoincrement())
  nombreTipo             String             @unique @db.VarChar(50) // Ejemplo: 'Pasaporte'
  descripcion            String?            @db.VarChar(255) // Explicación
  estado                 Boolean            @default(true)
  documentosAdjuntos     DocumentoAdjunto[]
}

model DocumentoAdjunto {
  idDocumentoAdjunto     Int      @id @default(autoincrement())
  idPersona              Int
  idTipoDocumentoAdjunto Int
  nombreArchivo          String   @db.VarChar(255)
  rutaArchivo            String   @db.VarChar(255)
  fechaSubida            DateTime @default(now())
  estado                 Boolean  @default(true)

  persona              Persona                @relation(fields: [idPersona], references: [idPersona])
  tipoDocumentoAdjunto Tipo_Documento_Adjunto @relation(fields: [idTipoDocumentoAdjunto], references: [idTipoDocumentoAdjunto])

  @@index([idPersona])
  @@index([idTipoDocumentoAdjunto])
}

model Persona {
  idPersona            Int                 @id @default(autoincrement())
  idDireccionUbicacion Int?
  idTipoDocumento      Int?
  nombre               String              @db.VarChar(100)
  apellido             String              @db.VarChar(100)
  dni                  Int?                @unique
  telefono             String?             @db.Char(9)
  genero               Genero?
  fechaNacimiento      DateTime?
  estado               Boolean             @default(true)
  direccionUbicacion   DireccionUbicacion? @relation(fields: [idDireccionUbicacion], references: [idDireccionUbicacion])
  tipoDocumento        Tipo_Documento?     @relation(fields: [idTipoDocumento], references: [idTipoDocumento])
  empleado             Empleado?
  DocumentoAdjunto DocumentoAdjunto[]
}

enum Genero {
  Masculino
  Femenino
  Otro
  No_Binario @map("No Binario")
}

enum DiaSemana {
  Lunes
  Martes
  Miercoles @map("Miércoles")
  Jueves
  Viernes
  Sabado    @map("Sábado")
  Domingo
}

//Modulo Empleado 
model Empleado {
  idEmpleado           Int                    @id @default(autoincrement())
  idPersona            Int                    @unique
  rol                  Rol
  horario              String?                @db.Text
  diasTrabajo          EmpleadoDiaSemana[]
  estado               Boolean                @default(true)
  persona              Persona                @relation(fields: [idPersona], references: [idPersona])
  usuario              Usuario?
  sueldo               Float?
  contratoInicio       DateTime?              @default(now())
  contratoFinal        DateTime?

}

model EmpleadoDiaSemana {
  id         Int       @id @default(autoincrement())
  idEmpleado Int
  dia        DiaSemana
  empleado   Empleado  @relation(fields: [idEmpleado], references: [idEmpleado])

  @@unique([idEmpleado, dia]) // Evita duplicados del mismo día
}

model Usuario {
  idUsuario               Int                    @id @default(autoincrement())
  idEmpleado              Int                    @unique
  correo                  String                 @unique @db.VarChar(150)
  userName                String?                @unique @db.VarChar(100)
  avatarUsuario           String?                @default("/img-default.jpg")
  contrasena              String                 @db.Text
  isActive                Boolean                @default(false)
  verificationToken       String?                @unique
  verificationTokenExpiry DateTime? // Nueva columna para la expiración del token
  estado                  Boolean                @default(true)
  resetPasswordToken      String?                @unique // Token para restablecimiento de contraseña
  resetPasswordExpires    DateTime? // Fecha de expiración del token de restablecimiento
  resetRequestedIp        String? // IP desde la que se solicitó el restablecimiento
  resetRequestedUserAgent String? // User-Agent del dispositivo
  empleado                Empleado               @relation(fields: [idEmpleado], references: [idEmpleado])
  @@index([resetPasswordToken]) // Índice para acelerar las búsquedas por el token
}